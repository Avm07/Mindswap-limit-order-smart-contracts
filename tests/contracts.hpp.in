#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio {
namespace testing {

struct contracts {
	static std::vector<uint8_t> token_wasm() {
		return read_wasm("${CMAKE_SOURCE_DIR}/token/token.wasm");
	}

	static std::vector<char> token_abi() {
		return read_abi("${CMAKE_SOURCE_DIR}/token/token.abi");
	}

	static std::vector<uint8_t> limit_wasm() {
		return read_wasm("${CMAKE_BINARY_DIR}/../contracts/limit/limit.wasm");
	}

	static std::vector<char> limit_abi() {
		return read_abi("${CMAKE_BINARY_DIR}/../contracts/limit/limit.abi");
	}

	static std::vector<uint8_t> arbitrage_wasm() {
		return read_wasm("${CMAKE_BINARY_DIR}/../contracts/arbitrage/arbitrage.wasm");
	}

	static std::vector<char> arbitrage_abi() {
		return read_abi("${CMAKE_BINARY_DIR}/../contracts/arbitrage/arbitrage.abi");
	}
};
} // namespace testing
} // namespace eosio
